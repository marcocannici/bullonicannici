#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{listings} % Package for listings
\usepackage{color}
\usepackage{refcount}[2006/02/20]

\definecolor{javablue}{RGB}{42,0.0,255} % for strings
\definecolor{javared}{rgb}{0.6,0,0} % for strings
\definecolor{javagreen}{rgb}{0.25,0.5,0.35} % comments
\definecolor{javapurple}{rgb}{0.5,0,0.35} % keywords
\definecolor{javadocblue}{rgb}{0.25,0.35,0.75} % javadoc

% Syntax highlighting for Java similar to Eclipse
\lstset{
language=Java,
basicstyle=\scriptsize\ttfamily,
frame=single,
aboveskip=1em,
backgroundcolor=\color{white},   % choose the background color	
breaklines=true,                 % automatic line breaking
postbreak=\raisebox{0ex}[0ex][0ex]{\ensuremath{\color{red}\hookrightarrow\space}},
breakindent=0em,
captionpos=b,                    % sets the caption-position to bottom	
keywordstyle=\color{javapurple}\bfseries, %keyword style
stringstyle=\color{javablue}, % string literal style
commentstyle=\color{javagreen}, % comment style
morecomment=[s][\color{javadocblue}]{/**}{*/}, % javadoc style
numbers=left,
numberstyle=\tiny\color{black},
stepnumber=1,
numbersep=10pt,
tabsize=2
%showspaces=false,
%showstringspaces=false
}

\makeatletter
\newcommand*{\lstlinelink}[2]{%
  \refused{#1}%
  \edef\lstlinelink@tmp{\getrefbykeydefault{#1}{anchor}{}}%
  \ifx\lstlinelink@tmp\@empty
    #2%
  \else
    \edef\lstlinelink@target{%
      \expandafter\lstlinelink@parse\lstlinelink@tmp\@nil
      #2%
    }%
    \hyperlink{\lstlinelink@target}{\textbf{#2}}%
  \fi
}
\def\lstlinelink@parse#1.#2\@nil{lstnumber.#2.}%
\makeatother

\newcommand{\includecode}[2]{
\lstinputlisting[linerange=#1-#2, firstnumber=#1]{code/CurrentTransaction.java}
}
\newcommand{\includecodelabel}[3]{
\lstinputlisting[linerange=#1-#2, firstnumber=#1, label=#3]{code/CurrentTransaction.java}
}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Functional Role
\end_layout

\begin_layout Subsection
JTS Transaction Service
\end_layout

\begin_layout Subsection
CurrentTransaction class
\end_layout

\begin_layout Standard
The “CurrentTransaction” class is a static class that does not implement
 any interface and is used to keep track of the associations between transaction
s and threads.
\end_layout

\begin_layout Standard
The following is the JavaDoc of the class: 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includecode{81}{89}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For each thread the class keeps track of the transactions with which it
 is associated to, the list of suspended transactions (which are transactions
 that have been suspended because a new request has been received while
 they were running) and the list of RegisteredStatics objects that will
 be informed of any changes in the associations of the thread with the transacti
ons.
 The class exposes methods to modify the current association of the thread
 and the list of suspended transactions and to retrieve the list of transactions
 associated to the current thread.
 It also exposes methods to notify the Control object that a reply or a
 request has been (or is about to be) either received or sended.
\end_layout

\begin_layout Subsection
endAborted method
\end_layout

\begin_layout Standard
This is a private method of the class “CurrentTransaction”, it is called
 by 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

release()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

sendingReply()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

sendingRequest()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 methods to ensure that the Control object associated with the current thread
 does not represent a transaction that has already been aborted, eventually
 terminating the current association and replacing it with an active one.
\end_layout

\begin_layout Standard
The following are the JavaDoc and the declaration of the method: 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includecode{353}{374}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The method checks if the transaction associated with the current thread
 has already been aborted (communicating it to the caller through the output
 parameter “
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf{
\end_layout

\end_inset

aborted
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

”) by checking his status.
 In that case, and if the method has been called with “
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf{
\end_layout

\end_inset

endAssociation
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

” argument set to true the method replaces the association to the current
 thread with the first ancestor that has not been aborted by calling 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

popAborted()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 ‘s Control method, resuming it.
 The method also deals with informing all the registered StaticResource
 objects that a new thread association has been established.
\end_layout

\begin_layout Subsection
sendingReply method
\end_layout

\begin_layout Standard
This is a public method of the “CurrentTransaction” class and it is called
 to inform the Coordinator of the current transaction that an imminent reply
 is about to be performed and so the association between the transaction
 and the current thread should be ended.
\end_layout

\begin_layout Standard
The following are the JavaDoc and the declaration of the method: 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includecode{1021}{1037}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The method is responsible to check that the current transaction is actually
 still active and there are no pending computation that must be terminated.
 To accomplish the first task the 
\begin_inset Quotes eld
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf{
\end_layout

\end_inset

endAborted()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 method is called to check if the transaction has already been aborted,
 and if so a 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

TRANSACTION_ROLLBACK
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 exception is raised communicating that the transaction is already completed
 (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

CompletionStatus.COMPLETED_YES
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

).
 For what concern the second task, the method checks the Coordinator by
 calling his “
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

replyAction
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

” method which returns an identifier of his current state:
\end_layout

\begin_layout Itemize
If there are still subtransactions that have not been completed yet (the
 value 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

CoordinatorImpl.activeChildren
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 has been returned) an 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

INVALID_TRANSACTION
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 exception is raised communicating the error code “
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

MinorCode.UnfinishedSubtransactions
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

”
\end_layout

\begin_layout Itemize
If the transaction is still associated to a thread different from the current
 one or there are outgoing requests of the Coordinator that have not been
 completed yet an 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

INVALID_TRANSACTION
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 exception is raised communicating the error code “
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

MinorCode.DeferredActivities
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

”
\end_layout

\begin_layout Standard
Finally, the method deals with terminating the association with the transaction
 and the current thread keeping consistent the list of transactions associated
 with the current thread, and resuming the last transaction, associated
 with the current thread, that had been suspended by calling “
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

endCurrent()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

” method.
\end_layout

\end_body
\end_document
