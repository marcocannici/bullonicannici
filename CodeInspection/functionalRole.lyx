#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{listings} % Package for listings
\usepackage{color}
\usepackage{refcount}[2006/02/20]

\definecolor{javablue}{RGB}{42,0.0,255} % for strings
\definecolor{javared}{rgb}{0.6,0,0} % for strings
\definecolor{javagreen}{rgb}{0.25,0.5,0.35} % comments
\definecolor{javapurple}{rgb}{0.5,0,0.35} % keywords
\definecolor{javadocblue}{rgb}{0.25,0.35,0.75} % javadoc

% Syntax highlighting for Java similar to Eclipse
\lstset{
language=Java,
basicstyle=\scriptsize\ttfamily,
frame=single,
aboveskip=1em,
backgroundcolor=\color{white},   % choose the background color	
breaklines=true,                 % automatic line breaking
postbreak=\raisebox{0ex}[0ex][0ex]{\ensuremath{\color{red}\hookrightarrow\space}},
breakindent=0em,
captionpos=b,                    % sets the caption-position to bottom	
keywordstyle=\color{javapurple}\bfseries, %keyword style
stringstyle=\color{javablue}, % string literal style
commentstyle=\color{javagreen}, % comment style
morecomment=[s][\color{javadocblue}]{/**}{*/}, % javadoc style
numbers=left,
numberstyle=\tiny\color{black},
stepnumber=1,
numbersep=10pt,
tabsize=2
%showspaces=false,
%showstringspaces=false
}

\makeatletter
\newcommand*{\lstlinelink}[2]{%
  \refused{#1}%
  \edef\lstlinelink@tmp{\getrefbykeydefault{#1}{anchor}{}}%
  \ifx\lstlinelink@tmp\@empty
    #2%
  \else
    \edef\lstlinelink@target{%
      \expandafter\lstlinelink@parse\lstlinelink@tmp\@nil
      #2%
    }%
    \hyperlink{\lstlinelink@target}{\textbf{#2}}%
  \fi
}
\def\lstlinelink@parse#1.#2\@nil{lstnumber.#2.}%
\makeatother

\newcommand{\includecode}[2]{
\lstinputlisting[linerange=#1-#2, firstnumber=#1]{code/CurrentTransaction.java}
}
\newcommand{\includecodecaption}[3]{
\lstinputlisting[linerange=#1-#2, firstnumber=#1, caption=#3]{code/CurrentTransaction.java}
}
\newcommand{\includecodelabel}[3]{
\lstinputlisting[linerange=#1-#2, firstnumber=#1, label=#3]{code/CurrentTransaction.java}
}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Functional Role
\end_layout

\begin_layout Subsection
JTS Transaction Service
\end_layout

\begin_layout Standard
The class 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf{
\end_layout

\end_inset

CurrentTransaction
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 assigned to us is part of the Java™ Transaction Service (JTS) implementation
 by Oracle.
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

Java™ Transaction Service (JTS) Specification
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "java-transaction-service"

\end_inset

 says:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{quotation}
\end_layout

\end_inset

JTS specifies the implementation of a transaction manager which supports
 the JTA (Java Transaction API) specification at the high-level and implements
 the Java mapping of the OMG Object Transaction Service (OTS) 1.1 Specification
 at the low-level.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{quotation}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Object Transaction Service is a paradigm that allows distributed access
 to resorces and computation (remote method calls).
\begin_inset CommandInset citation
LatexCommand cite
key "transaction-service-OMB"

\end_inset


\end_layout

\begin_layout Subsection
CurrentTransaction class
\end_layout

\begin_layout Standard
The “CurrentTransaction” class is a static class that does not implement
 any interface and is used to keep track of the associations between transaction
s and threads.
\end_layout

\begin_layout Standard
The following is the JavaDoc of the class: 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includecode{81}{89}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For each thread the class keeps track of the transactions with which it
 is associated to, the list of suspended transactions (which are transactions
 that have been suspended because a new request has been received while
 they were running) and the list of RegisteredStatics objects that will
 be informed of any changes in the associations of the thread with the transacti
ons.
 The class exposes methods to modify the current association of the thread
 and the list of suspended transactions and to retrieve the list of transactions
 associated to the current thread.
 It also exposes methods to notify the Control object that a reply or a
 request has been (or is about to be) either received or sended.
 The Control object associated to each transaction allows access to a Terminator
 object (which provides methods for commit or rollback) and a Coordinator
 object (which involves Resource objects in a transaction when they are
 registered
\begin_inset CommandInset citation
LatexCommand cite
key "transaction-service-OMB"

\end_inset

).
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following is a class diagram showing the main classes with which CurrentTran
saction class interacts with:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename resources/CurrentTransaction_dependencies.pdf
	width 10cm

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
endAborted method
\begin_inset CommandInset label
LatexCommand label
name "sub:endAborted-method"

\end_inset


\end_layout

\begin_layout Standard
This is a private method of the class “CurrentTransaction”, and it is used
 to ensure that the Control object associated with the current thread does
 not represent a transaction that has already been aborted.
 To do so, if the Control object does represent an aborted transaction,
 the method terminates the current association and replaces it with an active
 (not aborted) one.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following are the JavaDoc and the declaration of the method: 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includecode{353}{374}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The method checks if the transaction associated with the current thread
 has already been aborted (communicating it to the caller through the boolean
 output parameter “
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf{
\end_layout

\end_inset

aborted
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

”, which is an improperly used single element array instead of a proper
 Boolean object) by checking the transaction's status.
 If that's the case, and if the method is called with “
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf{
\end_layout

\end_inset

endAssociation
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

” argument set to true, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

endAborted()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 replaces the Control object associated with the current thread with its
 first ancestor that has not been aborted, by calling 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

popAborted()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 ‘s Control method to resume it.
 Eventually, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

endAborted()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 method also deals with informing all the registered StaticResource objects
 that the old thread association has been terminated and a new one has been
 established.
 However, if 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

endAborted()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 is called with “
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf{
\end_layout

\end_inset

endAssociation
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

” argument set to false instead, it means that it's being used just to check
 that the thread is associated to an active transaction, which is not its
 specific purpose.
 This is kind of an improper use of the method: it would have probably been
 better to create a method to specifically accomplish this task.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename resources/endAborted_callingMethods.pdf
	width 7cm

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This method is used by the public and friendly methods 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

release()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

sendingReply()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

sendingRequest()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 of CurrentTransaction class.
 To show how the method is actually used, we report the code snippets of
 the methods listed above showing where it is called:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includecodecaption{776}{784}{sendingRequest() calls endAboted()}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includecodecaption{1059}{1067}{sendingReply() calls endAborted()}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includecodecaption{1256}{1262}{release() calls endAborted()}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As we can see in Listing 1, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

endAborted()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 method is sometimes invoked just to check that the current thread is associated
 with an active transaction; the check is performed by looking at the output
 parameter 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf{
\end_layout

\end_inset

outBoolean
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

.
 It can also be seen that, whenever it is expected that the current thread
 is associated with an active transaction but it turns out that it's not,
 the methods that invoked 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

endAborted()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 return immediately, throwing an exception to communicate the unexpected
 behaviour.
\end_layout

\begin_layout Subsection
sendingReply method
\end_layout

\begin_layout Standard
This is a public method of the “CurrentTransaction” class and it is called
 to inform the Coordinator of the current transaction that an imminent reply
 is about to be performed and so the association between the transaction
 and the current thread should be ended.
\end_layout

\begin_layout Standard
The following are the JavaDoc and the declaration of the method: 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includecode{1021}{1037}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The method is responsible to check that the current transaction is actually
 still active and there are no pending computations that must be terminated.
 To accomplish the first task the 
\begin_inset Quotes eld
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf{
\end_layout

\end_inset

endAborted()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 method (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:endAborted-method"

\end_inset

 for a more detailed explanation) is called to check if the transaction
 has already been aborted, and if so a 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

TRANSACTION_ROLLBACK
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 exception is raised communicating that the transaction is already completed
 (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

CompletionStatus.COMPLETED_YES
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

) and the Coordinator is set to rollback only mode by calling 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

rollback_only()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 method.
 For what concerns the second task, the method requests the status of the
 Coordinator by calling his 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

replyAction()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 method:
\end_layout

\begin_layout Itemize
If there are still subtransactions that haven't been completed yet (the
 value 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

CoordinatorImpl.activeChildren
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 has been returned), an 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

INVALID_TRANSACTION
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 exception is raised communicating the error code “
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

MinorCode.UnfinishedSubtransactions
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

”
\end_layout

\begin_layout Itemize
If the transaction is still associated to a thread different from the current
 one or there are outgoing requests of the Coordinator that have not been
 completed yet, an 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

INVALID_TRANSACTION
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 exception is raised communicating the error code “
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

MinorCode.DeferredActivities
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

”
\end_layout

\begin_layout Standard
Finally, the method deals with terminating the association with the transaction
 keeping consistent the list of transactions associated with the current
 thread, and resuming the last transaction that had been suspended by calling
 “
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

endCurrent()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

” method.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename resources/sendingReply_callChain.pdf
	width 9cm

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

sendingReply()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 method is called whenever the methods 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

send_reply()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

send_exception()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

send_other()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 of the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf{
\end_layout

\end_inset

InterceptorImpl
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 class are invoked passing through 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

processServerSendPoint()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

sending_reply()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 calls, as shown in the class diagram above.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
A detailed explanation of what Interceptors are and when 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

send_reply()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

send_exception()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

send_other()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 are called is provided in 
\begin_inset Quotes eld
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

Transaction Service Specification
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "transaction-service-OMB"

\end_inset

 and 
\begin_inset Quotes eld
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{
\end_layout

\end_inset

CORBA Request Portable Interceptors: A Performance Analysis
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "corba-portable-interceptors"

\end_inset

 documents.
 We report below the most significant parts:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{quotation}
\end_layout

\end_inset

Portable Request Interceptors (PIs) are a mechanism allowing to modify the
 ORB or the application behaviour upon the event of sending or receiving
 a message (e.g.
 a request, a reply or an exception) without impacting either on the ORB
 code or on the application one.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{quotation}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{quotation}
\end_layout

\end_inset

The Transaction Service and the ORB must cooperate to realize certain Transactio
n Service function.
 This cooperation is realized on the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf{
\end_layout

\end_inset

client invocation path
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 and through the transaction interceptor.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{quotation}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{quotation}
\end_layout

\end_inset

Request Interceptors are classified in client request interceptors and server
 request interceptors.
 The former are installed in client-side ORBs and can intercept outgoing
 requests and contexts as well as incoming replies and exceptions.
 Conversely, the latter are installed in server-side ORBs and can intercept
 incoming requests and contexts as well as outgoing replies and exceptions.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset

Server request interceptors are activated either upon receiving a request
 (by implementing the receive_request(), receive_poll() or receive_request_servi
ce_contexts()) or upon the sending of a reply or of an exception (by implementin
g the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf{
\end_layout

\end_inset

send_reply()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf{
\end_layout

\end_inset

send_exception()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 or 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textbf{
\end_layout

\end_inset

send_other()
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 methods).
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{quotation}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
